definitions:
  chaincode.invokeCCRequest:
    properties:
      cc_name:
        type: string
      channel_name:
        type: string
      function:
        type: string
    type: object
  lifecycle.approveCCRequest:
    properties:
      cc_name:
        type: string
      cc_sequence:
        type: integer
      cc_version:
        type: string
      channel_name:
        type: string
      package_ID:
        type: string
    type: object
  lifecycle.approvedChaincodeResponse:
    properties:
      endorsement_plugin:
        type: string
      init_required:
        type: boolean
      package_ID:
        type: string
      sequence:
        type: integer
      validation_plugin:
        type: string
      version:
        type: string
    type: object
  lifecycle.ccApprovalRequest:
    properties:
      cc_name:
        type: string
      cc_sequence:
        type: integer
      cc_version:
        type: string
      channel_name:
        type: string
    type: object
  lifecycle.ccApprovals:
    properties:
      approvals:
        additionalProperties:
          type: boolean
        type: object
    type: object
  lifecycle.commitCCRequest:
    properties:
      cc_name:
        type: string
      cc_sequence:
        type: integer
      cc_version:
        type: string
      channel_name:
        type: string
    type: object
  lifecycle.committedChaincodeResponse:
    properties:
      chaincode:
        type: string
      channel:
        type: string
      endorsement_plugin:
        type: string
      sequence:
        type: string
      validation_plugin:
        type: string
      version:
        type: string
    type: object
  lifecycle.currentAdmin:
    properties:
      admin:
        type: string
    type: object
  lifecycle.installedChaincodeResponse:
    properties:
      label:
        type: string
      package_ID:
        type: string
    type: object
  lifecycle.packageCCRequest:
    properties:
      cc_source_name:
        type: string
      label:
        type: string
      language:
        type: string
      package_name:
        type: string
    type: object
  lifecycle.queryRequest:
    properties:
      cc_name:
        type: string
      channel_name:
        type: string
    type: object
  peer.peerVersion:
    properties:
      architecture:
        type: string
      version:
        type: string
    type: object
  repository.cloneRequest:
    properties:
      directory:
        type: string
      url:
        type: string
    type: object
  search.Article:
    properties:
      app_languages:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      author:
        type: string
      cc_languages:
        items:
          $ref: '#/definitions/search.CCLanguage'
        type: array
      description:
        type: string
      id:
        type: string
      name:
        type: string
      platform:
        type: string
      signature_policy:
        type: string
      uploaded:
        type: string
      versions:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
    type: object
  search.CCLanguage:
    properties:
      asset_struct:
        additionalProperties:
          type: string
        type: object
      dependencies:
        additionalProperties:
          type: string
        type: object
      language:
        type: string
      link:
        type: string
    type: object
info:
  contact:
    name: arogya.Gurkha
    url: https://github.com/arogyaGurkha
  description: API to run fabric binaries
  title: Hyperledger Fabric Gurkhaman API
  version: "0.1"
paths:
  /fabric/chaincode/invoke:
    post:
      consumes:
      - application/json
      description: '`peer chaincode invoke` is executed through `exec.Command()` to
        invoke the specified chaincode.'
      parameters:
      - description: channel name (mychannel), cc name (basic), function ('{
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/chaincode.invokeCCRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Invoke the specified chaincode.
      tags:
      - chaincode
  /fabric/chaincode/query:
    get:
      consumes:
      - application/json
      description: '`peer chaincode invoke` is executed through `exec.Command()` to
        get endorsed result of chaincode function call and print it. It won''t generate
        transaction.'
      parameters:
      - description: channel name (mychannel), cc name (basic)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/chaincode.invokeCCRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Query using the specified chaincode.
      tags:
      - chaincode
  /fabric/dashboard/deployCC:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Install specified CC using deployCC script.
      tags:
      - dashboard
  /fabric/dashboard/smart-contracts:
    get:
      description: Searches documents using the keyword provided by the react client.
        Uses '*' wildcard if no keyword provided.
      parameters:
      - description: search keyword
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/search.Article'
      summary: Search documents stored in the search index.
      tags:
      - search
    post:
      consumes:
      - application/json
      description: Receive data from UI to upload to the search index. Auto inserts
        random ID and upload date values.
      parameters:
      - description: Document that needs to be uploaded to the search index.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/search.Article'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/search.Article'
      summary: Add document to search index.
      tags:
      - dashboard
  /fabric/lifecycle/admin:
    get:
      consumes:
      - application/json
      description: Use terminal environmental variables to get the admin for peer
        cli container. Only Org1 and Org2 are supported.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lifecycle.currentAdmin'
      summary: Get the current admin org.
      tags:
      - lifecycle
  /fabric/lifecycle/admin/{organization}:
    post:
      consumes:
      - application/json
      description: Use terminal environmental variables to set the admin for peer
        cli container. Only Org1 and Org2 are supported.
      parameters:
      - description: organization to be set as admin (Org1 and Org2 supported)
        in: path
        name: organization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/lifecycle.currentAdmin'
      summary: Set an org as the admin.
      tags:
      - lifecycle
  /fabric/lifecycle/approve:
    get:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode queryapproved` is executed through `exec.Command()`
        to query approved chaincode definitions.'
      parameters:
      - description: cc name and the channel it was approved in
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/lifecycle.queryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/lifecycle.approvedChaincodeResponse'
      summary: Query an approved chaincode definition on a channel.
      tags:
      - lifecycle
    post:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode approveformyorg` is executed through
        `exec.Command()` to approve a chaincode definition.'
      parameters:
      - description: channel name (mychannel), cc name (basic), cc version (1.0),
          cc sequence (1), package ID (run [GET] /fabric/lifecycle/install)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/lifecycle.approveCCRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Approve the cc definition for the current org.
      tags:
      - lifecycle
  /fabric/lifecycle/commit:
    get:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode querycommited` is executed through `exec.Command()`
        to query committed chaincode definitions.'
      parameters:
      - description: cc name and the channel it was committed in
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/lifecycle.queryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/lifecycle.committedChaincodeResponse'
      summary: Query the committed chaincode definitions by channel on a peer.
      tags:
      - lifecycle
    post:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode commit` is executed through `exec.Command()`
        to commit chaincode definition on a channel.'
      parameters:
      - description: channel name (mychannel), cc name (basic), cc version (1.0),
          cc sequence (1)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/lifecycle.commitCCRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Commit the chaincode definition on the channel.
      tags:
      - lifecycle
  /fabric/lifecycle/commit/organizations:
    get:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode checkcommitreadiness` is executed through
        `exec.Command()` to check commit readiness.'
      parameters:
      - description: channel name (mychannel), cc name (basic), cc version (1.0),
          cc sequence (1)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/lifecycle.ccApprovalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/lifecycle.ccApprovals'
      summary: Check whether a chaincode definition is ready to be committed on a
        channel. Shows which organizations have approved the cc definition.
      tags:
      - lifecycle
  /fabric/lifecycle/install:
    get:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode queryinstalled` is executed through
        `exec.Command()` to query installed chaincodes on a peer.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/lifecycle.installedChaincodeResponse'
      summary: Query the installed chaincodes on a peer.
      tags:
      - lifecycle
  /fabric/lifecycle/install/{package_name}:
    post:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode install` is executed through `exec.Command()`
        to install chaincode on a peer.'
      parameters:
      - description: name of the package to install (e.g. basic.tar.gz)
        in: path
        name: package_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Install a cc.
      tags:
      - lifecycle
  /fabric/lifecycle/package:
    post:
      consumes:
      - application/json
      description: '`peer lifecycle chaincode install` is executed through `exec.Command()`
        to install chaincode on a peer.'
      parameters:
      - description: name of the cc to package (e.g. asset-transfer-basic), the language
          it is written in, and the label and package name for the cc once packaging
          is done
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/lifecycle.packageCCRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Package a cc.
      tags:
      - lifecycle
  /fabric/network/down:
    post:
      description: '`network.sh down` is executed through `exec.Command()` to shut
        down the network.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Bring down the fabric network.
      tags:
      - network
  /fabric/network/up:
    post:
      description: '`network.sh up createChannel` is executed through `exec.Command()`
        to start the network and create channel `mychannel`.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Bring up fabric network with one channel.
      tags:
      - network
  /fabric/peer/:
    get:
      description: '`peer version` is executed through `exec.Command()` to return
        the current peer version.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/peer.peerVersion'
      summary: Get the current peer binary version
      tags:
      - peer
  /fabric/repository/clone:
    get:
      consumes:
      - application/json
      description: Clone a repository.
      parameters:
      - description: url (https://github.com/arogyaGurkha/GurkhaContracts.git), directory
          (GurkhaContracts or nil)
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/repository.cloneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Clone a repository.
      tags:
      - repository
  /fabric/repository/logs:
    get:
      description: '`git reflog` is executed through `exec.Command()` to show the
        reflogs.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Show the reflog.
      tags:
      - repository
  /fabric/repository/pull:
    get:
      consumes:
      - application/json
      description: Pull changes from a remote repository.
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Pull changes from a remote repository.
      tags:
      - repository
  /fabric/repository/reset:
    post:
      description: '`git fetch`, `git reset --hard`, `git clean -xdf` is executed
        through `exec.Command()` to reset local repository.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Reset local repository.
      tags:
      - repository
  /fabric/repository/revert:
    post:
      description: Revert most recent update.
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Revert most recent update.
      tags:
      - repository
  /fabric/repository/updates:
    get:
      description: '`git log HEAD..origin/main --oneline` is executed through `exec.Command()`
        to print incoming changes.'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Show incoming changes.
      tags:
      - repository
swagger: "2.0"
